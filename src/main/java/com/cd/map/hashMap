HashMap:实现了哈希表的一种数据结构
1.8是数组+链表+红黑树

通过k计算出其hashCode并以hashCode&(n-1)作为数组的下标。
这样k就相当于数组的下标。通过k获取v就相当于，数组中通过下标获取元素。
元素相等判断：e.hash == hash &&((k = e.key) == key || (key != null && key.equals(k)))
V get(K k)
    1.如果存储的元素first!=null,存储的元素相等，则返回first
    2.如果有下一个节点且不是红黑树类型，则遍历链表找到相等元素
    3.如果有下一个节点且是红黑树类型，则通过红黑树查找
    4.如果没有值，则返回null

V put(K k,V v)
    1.如果索引位为null,则直接在数组中赋值
    2.如果索引位不为null,且元素相等，覆盖v
    3.如果索引位不为null,且元素不等且是红黑树类型，则遍历红黑树，找到元素相等，覆盖v
    4.如果索引位不为null,且元素不等且是链表，则遍历链表，找到元素相等，覆盖v








