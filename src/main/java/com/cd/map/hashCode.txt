Object
    native int hashCode()
    equals()

    0.同一个对象的定义：对象内容一致可以视为同一对象。对象地址一致可以视为同一对象。再或者是地址一致且内容一致
    1.equals方法比较俩个对象是否相等，即是否是同一个对象（同一个对象的定义由equals方法实现，对象内容一致视为同一对象，或者对象地址一致视为同一对象）
    2.hashCode方法是对象的散列值，其中实现该方法需要满足一下协定：
            2.1.同一个对象调用该方法返回的散列值要一致
            2.2.如果equals方法证明对象A和对象B是相等的，那么不管equals是如何定义相等的概念，那么A，B俩个对象的hashCode要一致
            总结：同一对象多次调用hashCode方法，其返回值一定要相等。不同对象equals时判断为true,那么这俩个对象的hashCode也一定要相等
            注意：但是！！！俩个对象的hashCode值相等，并不代表equals一定相等。
    总结：equals和hashCode是有联系的。hashCode是一个对象的内存地址的映射值。但是这个地址可能会有多个对象。即hashCode相同的俩个对象equals不一定相等
          即hashCode相当于一个对象的地址。知道了hashCode就知道了对象在哪块内存存储。但这块内存可能会有多个对象，此时需要用equals方法来判断我们需要存入的对象
          和内存存在的对象是否是一个对象。如果是同一个对象就不存，如果不是就存入。也就是说hashCode是对象地址的映射可以帮我们快速定位到对象的位置。equals可以帮
          我们判断对象是否为同一对象
    实列分析：
          Set是一个无序唯一的集合。底层是一个HashMap。存入Set中的元素，他们的equals方法一定不能相等。如果相等则不存入。
          但是new一个对象的时候，会生成一个该对象内存地址映射的hashCode,如果该hashCode地址上有对象，则需要判断equals是否是同一对象
          如果是同一对象则不存入。如果不是同一对象，则在该地址上生成一个链表，将该对象存放到链表中
          hashCode相等，就是hash冲突。


